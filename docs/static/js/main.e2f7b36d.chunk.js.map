{"version":3,"sources":["Generator/Generator.js","App.js","serviceWorker.js","index.js"],"names":["REGEX","GeneratedWord","word","className","onClick","navigator","clipboard","writeText","GeneratedWords","words","length","style","marginBottom","map","key","syllabify","match","concat","reduce","a","c","l","charAt","slice","Generator","useState","setWords","generatedWords","setGeneratedWords","input","useRef","handleSubmit","e","preventDefault","value","useEffect","flattenWords","flat","generate","arr","carr","r","s","Array","from","li","filter","ri","indexOf","Fragment","onSubmit","onReset","htmlFor","type","ref","id","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2f7b36d.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './Generator.css';\r\n\r\nconst REGEX = /[^aeiouy]*[aeiouy]+(?:[^aeiouy]*$|[^aeiouy](?=[^aeiouy]))?/gi;\r\n\r\n// components\r\nfunction GeneratedWord({ word }) {\r\n  const handleClick = () => navigator.clipboard.writeText(word);\r\n  return (\r\n    <button className=\"app-btn\" onClick={handleClick}>\r\n      {word}\r\n    </button>\r\n  );\r\n}\r\nfunction GeneratedWords({ words }) {\r\n  if (words.length < 1) return null;\r\n  return (\r\n    <div>\r\n      <p style={{ marginBottom: 20 }}>Click any name to copy</p>\r\n      {words.map((word, key) => (\r\n        <GeneratedWord word={word} key={key} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// words operations\r\nconst syllabify = (word) => word.match(REGEX);\r\nconst concat = (...words) =>\r\n  words.reduce((a, c) => {\r\n    const l = a.charAt(a.length - 1);\r\n    const f = c.charAt(0);\r\n    return a + (l === f ? c.slice(1) : c);\r\n  }, '');\r\n\r\n// main component\r\nfunction Generator() {\r\n  const [words, setWords] = useState([]);\r\n  const [generatedWords, setGeneratedWords] = useState([]);\r\n\r\n  let input = useRef(null);\r\n\r\n  // handlers\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setWords([...words, input.value]);\r\n    input.value = null;\r\n  };\r\n  const handleReset = (e) => {\r\n    input.value = null;\r\n    setWords([]);\r\n    setGeneratedWords([]);\r\n  };\r\n\r\n  //generating new words\r\n  const generate = (arr, a = a < arr.length ? a : arr.length, c = a) => {\r\n    if (a < 2) return arr;\r\n    //concating arrays\r\n    const carr = (l, r) => {\r\n      const s = Array.from(l)\r\n        .map((li) => {\r\n          return Array.from(r)\r\n            .filter((ri) => ri !== li && ri.indexOf(li) === -1)\r\n            .map((ri) => concat(li, ri));\r\n        })\r\n        .flat();\r\n      return a == c ? s : [...l, ...s];\r\n    };\r\n    return carr(arr, generate(arr, a - 1, c + 1));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const flattenWords = [...words.map(syllabify).flat()];\r\n    setGeneratedWords(generate(flattenWords, flattenWords.length));\r\n  }, [words]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={handleSubmit} onReset={handleReset} className=\"form\">\r\n        <label className=\"form__label\" htmlFor=\"word\">\r\n          Enter word:{' '}\r\n        </label>\r\n        <input\r\n          className=\"form__input form__input--text\"\r\n          type=\"text\"\r\n          ref={(e) => (input = e)}\r\n          onSubmit={handleSubmit}\r\n          id=\"word\"\r\n        />\r\n        <input\r\n          type=\"reset\"\r\n          value=\"Reset\"\r\n          className=\"form__input form__input--reset\"\r\n        />\r\n        {words.length > 0 && (\r\n          <ul className=\"form-queries\">\r\n            {words.map((word, key) => (\r\n              <li key={key} className=\"form-queries__item\">\r\n                {word}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </form>\r\n\r\n      <GeneratedWords words={generatedWords} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Generator;\r\n","import React from 'react';\nimport Generator from './Generator/Generator';\nimport './App.css';\nexport default function () {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <div className=\"app__layout\">\n          <h1 className=\"app-header__title\">Nick generator</h1>\n        </div>\n      </header>\n      <main>\n        <div className=\"app__layout\">\n          <Generator />\n        </div>\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}